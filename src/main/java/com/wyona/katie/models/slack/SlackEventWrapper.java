package com.wyona.katie.models.slack;

import lombok.extern.slf4j.Slf4j;

/**
 * See https://api.slack.com/types/event
 *
 * Event wrapper examples:
 *
 * {"token":"hoMub0zJ8kMXIxgqFgrDIc3x",
 *  "team_id":"T01848J69AP",
 *  "api_app_id":"A0184KMLJJE",
 *  "event":{
 *    "client_msg_id":"1eb24b4c-dedb-46e0-84da-6669c9bc28fb",
 *    "type":"message",
 *    "text":"What time is it?",
 *    "user":"U018A7XUWSY",
 *    "ts":"1597210813.000200",
 *    "team":"T01848J69AP",
 *    "blocks":[{
 *      "type":"rich_text",
 *      "block_id":"Dkzm",
 *      "elements":[{
 *        "type":"rich_text_section",
 *        "elements":[{
 *          "type":"text",
 *          "text":"What time is it?"}]
 *       }]
 *    }],
 *    "channel":"C018TT68E72",
 *    "event_ts":"1597210813.000200",
 *    "channel_type":"channel"
 *  },
 *  "type":"event_callback",
 *  "event_id":"Ev019DGN53EU",
 *  "event_time":1597210813,
 *  "authed_users":["U018505QFA6"]
 * }
 *
 *
 * {
 *    "token":"hoMub0zJ8kMXIxgqFgrDIc3x",
 *    "team_id":"T0LP49B4Y",
 *    "api_app_id":"A0184KMLJJE",
 *    "event":{
 *       "type":"message",
 *       "subtype":"channel_join",
 *       "ts":"1628201368.000800",
 *       "user":"U02AQC7V0QH",
 *       "text":"<@U02AQC7V0QH> has joined the channel",
 *       "inviter":"U0LP4BRLG",
 *       "channel":"C02AGB0BLQ4",
 *       "event_ts":"1628201368.000800",
 *       "channel_type":"channel"
 *    },
 *    "type":"event_callback",
 *    "event_id":"Ev02A5V4TT0W",
 *    "event_time":1628201368,
 *    "authed_users":[
 *       "U01ERKBF598"
 *    ],
 *    "authorizations":[
 *       {
 *          "enterprise_id":null,
 *          "team_id":"T0LP49B4Y",
 *          "user_id":"U01ERKBF598",
 *          "is_bot":true,
 *          "is_enterprise_install":false
 *       }
 *    ],
 *    "is_ext_shared_channel":false,
 *    "event_context":"4-eyJldCI6Im1lc3NhZ2UiLCJ0aWQiOiJUMExQNDlCNFkiLCJhaWQiOiJBMDE4NEtNTEpKRSIsImNpZCI6IkMwMkFHQjBCTFE0In0"
 * }
 *
 *
 */
@Slf4j
public class SlackEventWrapper {

    private String token;
    private String apiAppId;
    private String teamId;
    private String eventId;
    private String challenge;
    private String type;
    private String[] authenticatedUsers;
   
    private SlackEvent event;
    private SlackAuthorizations[] authorizations;

    // INFO: Default constructor is necessary, because otherwise a 400 is generated when using @RequestBody (see https://stackoverflow.com/questions/27006158/error-400-spring-json-requestbody-when-doing-post)
    /**
     *
     */
    public SlackEventWrapper() {
    }

    /**
     * Get security token (e.g. JWT), such that the "Katie Slack Bot" run in a particular Slack channel can access data or services inside a particular Katie context/domain. The security token was generated by Katie for the particular Katie context/domain and added by user to the particular Slack channel (or Slack workspace).
     */
    public String getSecurityToken() {
        // INFO: Slack does currently (2020.09.03, see email from Slack support with subject "internal integrations") not provide the functionality to add a security token, therefore we use the combination of the team/workspace Id, channel Id and user Id as semi secury token
        return getTeam_id() + "-" + getEvent().getChannel() + "-" + getEvent().getUser();
    }

    /**
     *
     */
    public void setAuthorizations(SlackAuthorizations[] authorizations) {
        this.authorizations = authorizations;
    }

    /**
     *
     */
    public SlackAuthorizations[] getAuthorizations() {
        return authorizations;
    }

    /**
     *
     */
    public void setEvent(SlackEvent event) {
        this.event = event;
    }

    /**
     *
     */
    public SlackEvent getEvent() {
        return event;
    }

    /**
     *
     */
    public void setAuthed_users(String[] authenticatedUsers) {
        this.authenticatedUsers = authenticatedUsers;
    }

    /**
     * Get an array of string-based User IDs. Each member of the collection represents a user that has installed your application/bot and indicates the described event would be visible to those users.
     */
    public String[] getAuthed_users() {
        return authenticatedUsers;
    }

    /**
     *
     */
    public void setApi_app_id(String apiAppId) {
        this.apiAppId = apiAppId;
    }

    /**
     * @return for example 'A0184KMLJJE'
     */
    public String getApi_app_id() {
        return apiAppId;
    }

    /**
     *
     */
    public void setTeam_id(String teamId) {
        this.teamId = teamId;
    }

    /**
     *
     */
    public String getTeam_id() {
        return teamId;
    }

    /**
     *
     */
    public void setEvent_id(String eventId) {
        this.eventId = eventId;
    }

    /**
     *
     */
    public String getEvent_id() {
        return eventId;
    }

    /**
     * @param token Slack verification token, see src/main/resources/application.properties
     */
    public void setToken(String token) {
        this.token = token;
    }

    /**
     *
     */
    public String getToken() {
        return token;
    }

    /**
     * @param type Event wrapper type, e.g. "event_callback"
     */
    public void setType(String type) {
        this.type = type;
    }

    /**
     *
     */
    public String getType() {
        return type;
    }

    /**
     *
     */
    public void setChallenge(String challenge) {
        this.challenge = challenge;
    }

    /**
     *
     */
    public String getChallenge() {
        return challenge;
    }

    /**
     *
     */
    @Override
    public String toString() {
        StringBuilder s = new StringBuilder("App Id: " + apiAppId + ", Token: " + token + ", Type: " + type + ", Team Id: " + teamId + ", Event Id: " + eventId + ", Event: " + event);
        if (authenticatedUsers != null && authenticatedUsers.length > 0) {
            s.append(", Authenticated users: ");
            for (int i = 0; i < authenticatedUsers.length; i++) {
                s.append(authenticatedUsers[i]);
                if (i < authenticatedUsers.length - 1) {
                s.append(",");
                }
            }
        }
        return s.toString();
    }
}
